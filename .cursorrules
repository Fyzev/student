# 学生管理系统开发规范

## 项目概述
这是一个基于 React + Node.js + TypeScript 的学生管理系统，包含前端和后端两个主要部分。

## 技术栈
- 前端：React 18 + TypeScript + Vite + Tailwind CSS
- 后端：Node.js + Express + TypeScript + Prisma
- 数据库：SQLite (开发) / PostgreSQL (生产)

## 项目结构
```
student-management-system/
├── frontend/                 # React前端应用
│   ├── src/
│   │   ├── components/      # 通用组件
│   │   ├── pages/          # 页面组件
│   │   ├── hooks/          # 自定义hooks
│   │   ├── services/       # API服务
│   │   ├── types/          # TypeScript类型定义
│   │   ├── utils/          # 工具函数
│   │   ├── styles/         # 样式文件
│   │   └── constants/      # 常量定义
│   └── package.json
├── backend/                 # Node.js后端应用
│   ├── src/
│   │   ├── controllers/    # 控制器
│   │   ├── models/         # 数据模型
│   │   ├── routes/         # 路由
│   │   ├── middleware/     # 中间件
│   │   ├── services/       # 业务逻辑
│   │   ├── types/          # TypeScript类型定义
│   │   └── utils/          # 工具函数
│   ├── prisma/             # 数据库schema
│   └── package.json
└── README.md
```

## 编码规范

### 通用规范
- 使用 TypeScript 进行类型安全的开发
- 遵循 ESLint 和 Prettier 配置
- 使用有意义的变量和函数命名
- 添加适当的注释和文档
- 遵循 DRY (Don't Repeat Yourself) 原则

### 前端规范
- 使用函数式组件和 React Hooks
- 组件名使用 PascalCase
- 文件名使用 kebab-case
- 使用 Tailwind CSS 进行样式设计
- 实现响应式设计，支持移动端
- 使用 React Query 进行数据获取和缓存
- 表单使用 React Hook Form

### 后端规范
- 使用 Express.js 框架
- 控制器处理 HTTP 请求
- 服务层处理业务逻辑
- 使用 Prisma ORM 进行数据库操作
- 实现 JWT 身份认证
- 使用 bcrypt 加密密码
- 实现 CORS 跨域处理

### 数据库规范
- 使用 Prisma Schema 定义数据模型
- 表名使用复数形式
- 字段名使用 snake_case
- 添加适当的索引
- 实现软删除机制
- 使用外键约束保证数据完整性

## 功能模块

### 核心功能
1. 用户管理 (用户认证、角色权限)
2. 学生信息管理 (基本信息、学籍信息)
3. 教师信息管理
4. 班级管理
5. 课程管理
6. 成绩管理
7. 考勤管理

### 扩展功能
1. 通知公告
2. 文件管理
3. 数据统计和报表
4. 系统日志

## API 设计规范
- 使用 RESTful API 设计
- 返回统一的响应格式
- 实现适当的错误处理
- 使用 HTTP 状态码
- 实现 API 版本控制

## 安全规范
- 实现身份认证和授权
- 验证用户输入
- 防止 SQL 注入
- 实现 CSRF 保护
- 使用 HTTPS
- 记录安全日志

## 测试规范
- 编写单元测试
- 编写集成测试
- 使用 Jest 测试框架
- 保持测试覆盖率 > 80%

## 部署规范
- 使用环境变量管理配置
- 实现健康检查
- 配置日志记录
- 实现监控和告警
- 使用 Docker 容器化

## 代码生成提示
当生成代码时，请：
1. 优先使用 TypeScript
2. 添加适当的类型定义
3. 实现错误处理
4. 添加必要的注释
5. 遵循项目的文件结构
6. 使用现代 JavaScript/TypeScript 特性
7. 实现响应式设计
8. 考虑用户体验和可访问性

## 文件命名约定
- 组件文件：PascalCase (如 UserProfile.tsx)
- 页面文件：PascalCase (如 StudentList.tsx)
- 工具文件：camelCase (如 formatDate.ts)
- 类型文件：camelCase (如 userTypes.ts)
- 样式文件：kebab-case (如 user-profile.css)
- 配置文件：kebab-case (如 tailwind.config.js)

## 组件开发规范
- 每个组件一个文件
- 使用 Props 接口定义组件属性
- 实现适当的默认值
- 添加 PropTypes 或 TypeScript 类型检查
- 实现错误边界处理
- 优化组件性能

## 状态管理
- 使用 React Context 进行全局状态管理
- 使用 React Query 进行服务器状态管理
- 使用 React Hook Form 进行表单状态管理
- 避免过度使用全局状态

## 错误处理
- 实现全局错误处理
- 使用 try-catch 块
- 提供用户友好的错误信息
- 记录错误日志
- 实现错误恢复机制 